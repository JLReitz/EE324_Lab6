/*
 * main.c
 *
 *  Created on: Nov 30, 2017
 *      Author: jlrei
 */


#include "xparameters.h"
#include "xil_types.h"


#define VGA_BaseAddr	0x43C00000
#define VGA_Disp_En		0x43C00000
#define VGA_H_Sync		0x43C00004
#define VGA_H_BP		0x43C00008
#define VGA_H_FP		0x43C0000C
#define VGA_H_Range		0x43C00010
#define VGA_H_LR		0x43C00014
#define VGA_V_Sync		0x43C00018
#define VGA_V_BP		0x43C0001C
#define VGA_V_FP		0x43C00020
#define VGA_V_Range		0x43C00024
#define VGA_V_TB		0x43C00028
#define Display_Char	0x43C0002C
#define VGA_Back_Color	0x43C00030
#define VGA_Font_Color	0x43C00034
#define Char_XLoc		0x43C00038
#define Char_YLoc		0x43C0003C


void writeValue(u32 * addr, u32 value)
{
	*addr = value;
}

void setConfig()
{
	writeValue((u32 *)VGA_H_Sync, (u32)96);
	writeValue((u32 *)VGA_H_BP, (u32)48);
	writeValue((u32 *)VGA_H_FP, (u32)16);
	writeValue((u32 *)VGA_H_Range, (u32)640);
	writeValue((u32 *)VGA_H_LR, (u32)0);
	writeValue((u32 *)VGA_V_Sync, (u32)2);
	writeValue((u32 *)VGA_V_BP, (u32)33);
	writeValue((u32 *)VGA_V_FP, (u32)10);
	writeValue((u32 *)VGA_V_Range, (u32)480);
	writeValue((u32 *)VGA_V_TB, (u32)0);
}

void setCharLocation(u32 x_Location, u32 y_Location)
{
	//Modify the X and Y locations to place the character in the displayable region
	writeValue((u32 *)Char_XLoc, (x_Location+144));
	writeValue((u32 *)Char_YLoc, (y_Location+35));
}

void setCharValue(u32 value)
{
	writeValue((u32 *)Display_Char, value);
}

void setColor_Black(u32 * colorAddr)
{
	writeValue(colorAddr, (u32)0x00000000);
}

void setColor_White(u32 * colorAddr)
{
	writeValue(colorAddr, (u32)0xFFFFFFFF);
}

void setColor_Red(u32 * colorAddr)
{
	writeValue(colorAddr, (u32)0x0000001F);
}

void setColor_Blue(u32 * colorAddr)
{
	writeValue(colorAddr, (u32)0x000001E0);
}

void setColor_Green(u32 * colorAddr)
{
	writeValue(colorAddr, (u32)0x0000FE00);
}

int msleep(u32 msec)
{
    volatile u32 i = 0;

    for(i = 0; i < msec * 1000000; i++);
}

int main(void)
{
	writeValue((u32 *)VGA_Disp_En, 0);

	setConfig();

	setCharValue((u32)' ');
	setCharLocation(0, 0);

	setColor_White((u32 *)VGA_Back_Color);
	setColor_Black((u32 *)VGA_Font_Color);

	writeValue((u32 *)VGA_Disp_En, 1);

	volatile int j = 0, k = 0;
	volatile char c = '\0';

	while(1)
	{
		//Black screen for a second
		setColor_Black((u32 *)VGA_Back_Color);
		setColor_Black((u32 *)VGA_Font_Color);
		msleep(100);
		setColor_White((u32 *)VGA_Back_Color);

		//Display lowercase
		j = 5;
		k = 0;
		setColor_Blue((u32 *)VGA_Font_Color);
		for(c='a'; c<='z'; c++)
		{
			setCharValue((u32)c);
			setCharLocation(j, k);

			j += 24;

			msleep(50);
		}

		//Display uppercase
		j = 5;
		k = 20;
		setColor_Red((u32 *)VGA_Font_Color);
		for(c='A'; c<='Z'; c++)
		{
			setCharValue((u32)c);
			setCharLocation(j, k);

			j += 24;

			msleep(50);
		}

		//Display numbers and special characters
		j = 5;
		k = 40;
		setColor_Green((u32 *)VGA_Font_Color);
		for(c='0'; c<='9'; c++)
		{
			setCharValue((u32)c);
			setCharLocation(j, k);

			j += 15;

			msleep(50);
		}

		for(c='!'; c<='/'; c++)
		{
			setCharValue((u32)c);
			setCharLocation(j, k);

			j += 10;

			msleep(50);
		}

		for(c=':'; c<='@'; c++)
		{
			setCharValue((u32)c);
			setCharLocation(j, k);

			j += 10;

			msleep(50);
		}

		for(c='['; c<='`'; c++)
		{
			setCharValue((u32)c);
			setCharLocation(j, k);

			j += 10;

			msleep(50);
		}

		for(c='{'; c<='~'; c++)
		{
			setCharValue((u32)c);
			setCharLocation(j, k);

			j += 10;

			msleep(50);
		}
	}
}
